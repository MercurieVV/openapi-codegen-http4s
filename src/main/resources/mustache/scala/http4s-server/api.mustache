{{>licenseInfo}}

package {{package}}


//import {{invokerPackage}}._
import {{modelPackage}}._

//import {{package}}.impl._
import io.circe.generic.auto._
import io.circe.syntax._
import cats.MonadError
import cats.implicits._
import cats.effect.Sync

import org.http4s.HttpService
import org.http4s.QueryParamDecoder.fromUnsafeCast
import org.http4s.circe._
import org.http4s.circe.CirceEntityCodec._
import org.http4s.HttpRoutes
import org.http4s.dsl._
import org.http4s.dsl.impl.Root
import org.http4s.dsl.io._, scala.concurrent.ExecutionContext.Implicits.global
import cats.data.EitherT

{{#imports}}import {{import}}
{{/imports}}


class {{classname}}[F[_]](
    ex: Http4sFunctionExecutor[F, F],
{{#operations}}
    {{#operation}}
        {{operationId}}: (Request_{{operationId}}) => F[{{>returnType}}],
    {{/operation}}
{{/operations}}
)(implicit F: MonadError[F, Throwable], sync: Sync[F], root: Path = Root) {
   val httpService: HttpRoutes[F] = HttpRoutes.of[F] {
{{#operations}}
  {{#operation}}
        case req @ {{httpMethod}} -> root / {{& vendorExtensions.x-routeType}} =>
          ex.process[Request_{{operationId}}, {{>returnType}}]( //Process_{{operationId}}
            {{operationId}}
            ,for{
                {{#allParams}}{{#isQueryParam}}{{paramName}} <- F.pure({{paramName}}D)
                {{/isQueryParam}}{{#isBodyParam}}body <- req.as[{{>paramDatatype}}]{{/isBodyParam}}{{/allParams}}
                req <- F.pure(Request_{{operationId}}({{>params}}))
            } yield req
            //, (_: {{>returnType}}).asJson
            , req
          )
  {{/operation}}
{{/operations}}
    }



//INPUT PARAMS DECODERS
{{#operations}}
    {{#operation}}
        {{#allParams}}
            {{^isBodyParam}}
object Decoder_{{operationId}}_{{paramName}} extends {{^required}}Optional{{/required}}QueryParamDecoderMatcher[{{>dataType}}]("{{paramName}}")
            {{/isBodyParam}}
        {{/allParams}}
    {{/operation}}
{{/operations}}
}

object {{classname}}{
{{#operations}}
    {{#operation}}
        {{#allParams}}{{#isEnum}}{{>enumClass}}{{/isEnum}}{{/allParams}}
    {{/operation}}
{{/operations}}

}

//INPUT DATA CASE CLASSES
{{#operations}}
  {{#operation}}
    //{{#isListContainer}}case class {{{returnType}}}ListWrapper({{{vendorExtensions.returnTypeVar}}}: List[{{{returnType}}}]){{/isListContainer}}
    case class Request_{{operationId}} (
    {{#allParams}}
        {{paramName}}: {{>optionableDataType}},
    {{/allParams}}
    )
  {{/operation}}
{{/operations}}
