{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}


import {{invokerPackage}}._
import {{modelPackage}}._

import {{package}}.impl._
import io.circe.generic.auto._
import io.circe.syntax._
import io.circe.java8.time._

import org.http4s.HttpService
import org.http4s.QueryParamDecoder.fromUnsafeCast
import org.http4s.circe._
import org.http4s.dsl._
import org.http4s.dsl.impl.Root
import cats.effect._, org.http4s.dsl.io._, scala.concurrent.ExecutionContext.Implicits.global
import cats.data.EitherT

class {{classname}}(executionHelper: ExecutionHelper, processors: {{classname}}ProcessorsModule) {
   import executionHelper._
   val httpService = HttpService[IO] {
{{#operations}}
  {{#operation}}
        case req @ {{httpMethod}} -> Root / {{& vendorExtensions.x-routeType}} =>
          executionHelper.process{{^isListContainer}}Single{{/isListContainer}}{{#isListContainer}}Sequence{{/isListContainer}}[Request_{{operationId}}, {{>returnType}}]( //Process_{{operationId}}
            processors.{{operationId}}
            ,{for(
                {{#allParams}}{{#isQueryParam}}{{paramName}} <- EitherT(IO {validation({{paramName}}D)});
                {{/isQueryParam}}{{/allParams}}
                req <- EitherT.liftF[IO, Throwable, Request_{{operationId}}](IO {Request_{{operationId}}({{>params}})})
            ) yield req}.value
            , _.asJson
            , req
            , processors.buildInfo
          )
  {{/operation}}
{{/operations}}
    }



//INPUT PARAMS DECODERS
{{#operations}}
    {{#operation}}
        {{#allParams}}
            {{^isBodyParam}}
object Decoder_{{operationId}}_{{paramName}} extends {{^required}}Optional{{/required}}ValidatingQueryParamDecoderMatcher[{{>dataType}}]("{{paramName}}")
            {{/isBodyParam}}
        {{/allParams}}
    {{/operation}}
{{/operations}}
}

object {{classname}}{
{{#operations}}
    {{#operation}}
        {{#allParams}}{{#isEnum}}{{>enumClass}}{{/isEnum}}{{/allParams}}
    {{/operation}}
{{/operations}}

}

//INPUT DATA CASE CLASSES
{{#operations}}
  {{#operation}}
    //{{#isListContainer}}case class {{{returnType}}}ListWrapper({{{vendorExtensions.returnTypeVar}}}: List[{{{returnType}}}]){{/isListContainer}}
    case class Request_{{operationId}} (
    {{#allParams}}
        {{paramName}}: {{>optionableDataType}},
    {{/allParams}}
    )
  {{/operation}}
{{/operations}}
