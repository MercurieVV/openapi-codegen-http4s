{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

//import {{invokerPackage}}._
import {{modelPackage}}._

import io.circe.generic.auto._
import io.circe.syntax._

import org.http4s.{Request, Method}
import org.http4s.QueryParamDecoder.fromUnsafeCast
import org.http4s.circe._
import org.http4s.dsl._
import org.http4s.dsl.io._
import org.http4s.client.Client
import org.http4s.{HttpService, Uri}
import org.http4s.dsl.io._, scala.concurrent.ExecutionContext.Implicits.global
import cats.data.EitherT

class {{classname}}[F[_]](httpClient: Client[F], basePath:  Uri, clientExecutionHelper: ClientExecutionHelper)(implicit sync: Sync[F]) {
    import clientExecutionHelper._
{{#operations}}
  {{#operation}}
    {{#isWrapper}}{{#isListContainer}}case class {{{returnType}}}ListWrapper({{{vendorExtensions.returnTypeVar}}}: List[{{{returnType}}}]){{/isListContainer}}{{/isWrapper}}
    def {{nickname}}({{#allParams}}{{paramName}}: {{#required}}{{dataType}}{{>valuePredicates}}{{/required}}{{^required}}Option[{{dataType}}{{>valuePredicates}}]{{/required}} {{#defaultValue}} = ({{{defaultValue}}}){{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/allParams}})/*: F[{{>returnType}}]*/ = {
        httpClient.{{#returnType}}expect{{/returnType}}{{^returnType}}fetch{{/returnType}}(Request[F](
            method = Method.{{httpMethod}},
            uri = basePath / {{& vendorExtensions.x-routeTypeClient}} {{#allParams}}{{>queryParam}}{{/allParams}},
        ){{#allParams}}{{#isBodyParam}}.withBody({{paramName}}.asJson){{/isBodyParam}}{{/allParams}}){{^returnType}}(emptyResponse){{/returnType}}{{#returnType}}(jsonOf[F, {{>returnType}}]){{/returnType}}
    }
  {{/operation}}
{{/operations}}
}

