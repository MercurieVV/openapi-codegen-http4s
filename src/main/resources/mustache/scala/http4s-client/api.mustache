{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

//import {{invokerPackage}}._
import {{modelPackage}}._

import io.circe.generic.auto._
import io.circe.syntax._
import io.circe.java8.time._

import org.http4s.{Request, Method}
import org.http4s.QueryParamDecoder.fromUnsafeCast
import org.http4s.circe._
import org.http4s.dsl._
import org.http4s.dsl.io._
import org.http4s.client.Client
import org.http4s.{HttpService, Uri}
import cats.effect._, org.http4s.dsl.io._, scala.concurrent.ExecutionContext.Implicits.global
import cats.data.EitherT

class {{classname}}(httpClient: Client[IO], basePath:  Uri, clientExecutionHelper: ClientExecutionHelper) {
    import clientExecutionHelper._
{{#operations}}
  {{#operation}}
    {{#isWrapper}}{{#isListContainer}}case class {{{returnType}}}ListWrapper({{{vendorExtensions.returnTypeVar}}}: List[{{{returnType}}}]){{/isListContainer}}{{/isWrapper}}
    def {{nickname}}({{#allParams}}{{paramName}}: {{#required}}{{dataType}}{{>valuePredicates}}{{/required}}{{^required}}Option[{{dataType}}{{>valuePredicates}}]{{/required}} {{#defaultValue}} = ({{{defaultValue}}}){{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/allParams}}): IO[{{>returnType}}] = {
        httpClient.expect{{^returnType}}[Unit]{{/returnType}}(Request[IO](
            method = Method.{{httpMethod}},
            uri = basePath / {{& vendorExtensions.x-routeTypeClient}} {{#allParams}}{{>queryParam}}{{/allParams}},
        ){{#allParams}}{{#isBodyParam}}.withBody({{paramName}}.asJson){{/isBodyParam}}{{/allParams}}){{#returnType}}(jsonOf[IO, {{>returnType}}]){{/returnType}}
    }
  {{/operation}}
{{/operations}}
}

