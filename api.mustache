{{>licenseInfo}}

package {{package}}

{{#imports}}import {{import}}
{{/imports}}

import co.nextwireless.common.ws._
import co.nextwireless.common.ws.http4s._
import {{modelPackage}}._

import {{package}}.impl._
import io.circe.generic.auto._
import io.circe.syntax._
import io.circe.java8.time._
import org.http4s._
//import org.http4s.circe._
import org.http4s.dsl._
import io.circe._, io.circe.generic.auto._, io.circe.parser._, io.circe.syntax._
import fs2.Task
import io.circe.java8.time._

class {{classname}}(requestProcessorExecuter: RequestProcessorExecuter, processors: {{classname}}ProcessorsModule) {
   val httpService = HttpService {
{{#operations}}
  {{#operation}}
        case req @ {{httpMethod}} -> Root / {{& vendorExtensions.x-routeType}} => requestProcessorExecuter.process[Request_{{operationId}}, {{>returnType}}, Process_{{operationId}}](processors.process_{{operationId}}, Request_{{operationId}}({{#allParams}}{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}}), _.asJson)
  {{/operation}}
{{/operations}}
    }
}

{{#operations}}
  {{#operation}}
    {{#allParams}}
    object Decoder_{{operationId}}_{{paramName}} extends QueryParamDecoderMatcher[{{#required}}{{{dataType}}}{{/required}}{{^required}}Option[{{{dataType}}}]{{/required}}]("{{operationId}}_{{paramName}}")
    {{/allParams}}
  {{/operation}}
{{/operations}}

{{#operations}}
  {{#operation}}
    {{#isListContainer}}case class {{{returnType}}}ListWrapper({{{vendorExtensions.returnTypeVar}}}: List[{{{returnType}}}]){{/isListContainer}}
    case class Request_{{operationId}} (
    {{#allParams}}
        {{paramName}}: {{#required}}{{{dataType}}}{{/required}}{{^required}}Option[{{{dataType}}}]{{/required}}{{#hasMore}},{{/hasMore}}
    {{/allParams}}
    )
  {{/operation}}
{{/operations}}
